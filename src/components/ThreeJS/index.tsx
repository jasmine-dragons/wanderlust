// import { useFrame } from '@react-three/fiber';
// import 'mapbox-gl/dist/mapbox-gl.css';
// import { useRef, useState } from 'react';
// const ThreeJS = () => {
//   const ref = useRef<THREE.Mesh>(null!);
//   const [hovered, hover] = useState(false);
//   const [clicked, click] = useState(false);
//   useFrame((state, delta) => (ref.current.rotation.x += delta));
//   return (
//     <mesh
//       ref={ref}
//       scale={clicked ? 1.5 : 1}
//       onClick={() => click(!clicked)}
//       onPointerOver={() => hover(true)}
//       onPointerOut={() => hover(false)}
//     >
//       <boxGeometry args={[1, 1, 1]} />
//       <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
//     </mesh>
//   );
// };

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf --transform
Author: Suushimi (https://sketchfab.com/Suushimi)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/binoculars-194aa47f854d4d9983dcd57ee581bea2
Title: Binoculars
*/

import { useGLTF } from '@react-three/drei';
import React from 'react';

export function Binoculars(props: any) {
  const { nodes, materials } = useGLTF('/binoculars-transformed.glb');
  const myMesh = React.useRef();

  // useFrame(({ clock }) => {
  //   myMesh.current.rotation.z = clock.getElapsedTime();
  // });

  return (
    <group {...props} ref={myMesh} dispose={null}>
      <mesh
        geometry={nodes.Object_2.geometry}
        material={materials.initialShadingGroup}
        rotation={[-Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload('/binoculars-transformed.glb');

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf --transform
Author: jakecircles (https://sketchfab.com/jakecircles)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/stylized-burger-78c2e8cba66e4f5294cec5aa05c9d431
Title: Stylized Burger
*/

export function Burger(props) {
  const { nodes, materials } = useGLTF('/burger-transformed.glb');
  const myMesh = React.useRef();

  // useFrame(({ clock }) => {
  //   myMesh.current.rotation.y = clock.getElapsedTime();
  // });

  return (
    <group {...props} ref={myMesh} dispose={null} scale={5} position={[0, 5, 0]}>
      <group
        position={[-0.02, -0.75, -0.21]}
        rotation={[2.66, -0.76, 3.04]}
        scale={[0.37, 0.03, 0.37]}
      >
        <mesh geometry={nodes.Object_16.geometry} material={materials.pickle_1} />
        <mesh geometry={nodes.Object_17.geometry} material={materials.pickle_center_1} />
      </group>
      <group
        position={[0.19, -0.76, -0.03]}
        rotation={[-2.75, -0.7, -2.7]}
        scale={[0.37, 0.03, 0.37]}
      >
        <mesh geometry={nodes.Object_19.geometry} material={materials.pickle_2} />
        <mesh geometry={nodes.Object_20.geometry} material={materials.pickle_center_2} />
      </group>
      <group
        position={[0.11, -0.76, -0.12]}
        rotation={[-3, -0.79, -2.9]}
        scale={[0.37, 0.03, 0.37]}
      >
        <mesh geometry={nodes.Object_22.geometry} material={materials.pickle_3} />
        <mesh geometry={nodes.Object_23.geometry} material={materials.pickle_center_3} />
      </group>
      <group
        position={[-0.04, -0.75, 0.04]}
        rotation={[0.08, 0.79, -0.02]}
        scale={[0.37, 0.03, 0.37]}
      >
        <mesh geometry={nodes.Object_33.geometry} material={materials.pickle_4} />
        <mesh geometry={nodes.Object_34.geometry} material={materials.pickle_center_4} />
      </group>
      <group
        position={[-0.19, -0.77, 0.04]}
        rotation={[-0.14, 0.99, 0.28]}
        scale={[0.37, 0.03, 0.37]}
      >
        <mesh geometry={nodes.Object_36.geometry} material={materials.pickle_5} />
        <mesh geometry={nodes.Object_37.geometry} material={materials.pickle_center_5} />
      </group>
      <mesh
        geometry={nodes.Object_4.geometry}
        material={materials.sesame_seed}
        position={[-0.11, -0.66, 0.16]}
        rotation={[2.2, -0.47, 0.04]}
        scale={[0.02, 0.03, 0.02]}
      />
      <mesh
        geometry={nodes.Object_6.geometry}
        material={materials.bun_top}
        position={[0, -0.69, -0.05]}
        rotation={[-Math.PI, -0.8, -Math.PI]}
      />
      <mesh
        geometry={nodes.Object_8.geometry}
        material={materials.bun_bottom}
        position={[0, -1.01, -0.05]}
        rotation={[0, 0.8, -Math.PI]}
      />
      <mesh
        geometry={nodes.Object_10.geometry}
        material={materials.burger}
        position={[0, -0.9, -0.05]}
      />
      <mesh
        geometry={nodes.Object_12.geometry}
        material={materials.cheese_top}
        position={[0, -0.85, -0.05]}
      />
      <mesh
        geometry={nodes.Object_14.geometry}
        material={materials.cheese_bottom}
        position={[0.03, -0.96, -0.08]}
        rotation={[-Math.PI, -0.8, -Math.PI]}
      />
      <mesh
        geometry={nodes.Object_25.geometry}
        material={materials.tomato_1}
        position={[-0.15, -0.82, -0.04]}
        rotation={[-3.09, -0.8, -3.06]}
        scale={[0.62, 0.04, 0.62]}
      />
      <mesh
        geometry={nodes.Object_27.geometry}
        material={materials.tomato_2}
        position={[0, -0.82, -0.06]}
        rotation={[-3.01, -0.79, -2.93]}
        scale={[0.62, 0.04, 0.62]}
      />
      <mesh
        geometry={nodes.Object_29.geometry}
        material={materials.tomato_3}
        position={[0.15, -0.82, -0.04]}
        rotation={[-3.07, -0.79, -3]}
        scale={[0.62, 0.04, 0.62]}
      />
      <mesh
        geometry={nodes.Object_31.geometry}
        material={materials.lettuce}
        position={[0.01, -0.79, -0.07]}
      />
      <mesh
        geometry={nodes.Object_39.geometry}
        material={materials.onion_7}
        position={[0.15, -0.77, 0.09]}
        rotation={[-3.03, -0.89, -3.12]}
        scale={[0.04, 0.02, 0.33]}
      />
    </group>
  );
}

useGLTF.preload('/burger-transformed.glb');

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf --transform
Author: spookyghostboo (https://sketchfab.com/spookyghostboo)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/microphone-9c8483481a134ecf84d3864b45faca6a
Title: Microphone
*/

export function Microphone(props) {
  const { nodes, materials } = useGLTF('/microphone-transformed.glb');
  const myMesh = React.useRef();

  // useFrame(({ clock }) => {
  //   myMesh.current.rotation.x = clock.getElapsedTime();
  //   myMesh.current.rotation.z = clock.getElapsedTime();
  //   myMesh.current.rotation.y = clock.getElapsedTime();
  // });
  return (
    <group {...props} ref={myMesh} dispose={null} scale={0.015}>
      <mesh
        geometry={nodes.Cylinder_Material001_0.geometry}
        material={materials['Material.001']}
        position={[0, 14.34, 0]}
        rotation={[-Math.PI / 2, 0, 0]}
        scale={12.47}
      />
    </group>
  );
}

useGLTF.preload('/microphone-transformed.glb');
